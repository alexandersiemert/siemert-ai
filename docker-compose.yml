version: '3.8'

services:
  # Frontend - Next.js mit Glassmorphism Design
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: siemert-frontend
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:4000/api
      - NEXT_PUBLIC_WS_URL=ws://localhost:4000
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - backend
    networks:
      - siemert-network
    restart: unless-stopped

  # Backend - NestJS API Server
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: siemert-backend
    ports:
      - "4000:4000"
    environment:
      NODE_ENV: development
      JWT_SECRET: siemert_ai_super_secret_2025
      # PostgreSQL
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: siemert_ai
      POSTGRES_USER: siemert_user
      POSTGRES_PASSWORD: siemert_secure_2025
      # MongoDB
      MONGODB_URI: mongodb://mongodb:27017/siemert_knowledge
      # Keycloak
      KEYCLOAK_URL: http://keycloak:8080
      KEYCLOAK_REALM: siemert-ai
      KEYCLOAK_CLIENT_ID: siemert-backend
      # MinIO S3
      MINIO_ENDPOINT: minio
      MINIO_PORT: 9000
      MINIO_ACCESS_KEY: siemert_minio_key
      MINIO_SECRET_KEY: siemert_minio_secret_2025
      # KI Integration
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      KI_OFFLINE_MODE: true
    volumes:
      - ./backend:/app
      - /app/node_modules
    depends_on:
      - postgres
      - mongodb
      - keycloak
      - minio
    networks:
      - siemert-network
    restart: unless-stopped

  # PostgreSQL - Strukturierte Daten
  postgres:
    image: postgres:16-alpine
    container_name: siemert-postgres
    environment:
      POSTGRES_DB: siemert_ai
      POSTGRES_USER: siemert_user
      POSTGRES_PASSWORD: siemert_secure_2025
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - siemert-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U siemert_user -d siemert_ai"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MongoDB - Wissensdatenbank & KI-Logs
  mongodb:
    image: mongo:7-jammy
    container_name: siemert-mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: siemert_admin
      MONGO_INITDB_ROOT_PASSWORD: siemert_mongo_2025
      MONGO_INITDB_DATABASE: siemert_knowledge
    volumes:
      - mongodb_data:/data/db
      - ./database/mongodb/init.js:/docker-entrypoint-initdb.d/init.js
    ports:
      - "27017:27017"
    networks:
      - siemert-network
    restart: unless-stopped

  # Keycloak - Benutzer & Authentifizierung
  keycloak:
    image: quay.io/keycloak/keycloak:23.0
    container_name: siemert-keycloak
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: siemert_keycloak_admin_2025
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/keycloak
      KC_DB_USERNAME: siemert_user
      KC_DB_PASSWORD: siemert_secure_2025
      KC_HOSTNAME_STRICT: false
      KC_HTTP_ENABLED: true
    command: start-dev
    ports:
      - "8080:8080"
    depends_on:
      - postgres
    networks:
      - siemert-network
    restart: unless-stopped

  # MinIO - Dateispeicher (S3-kompatibel)
  minio:
    image: minio/minio:latest
    container_name: siemert-minio
    environment:
      MINIO_ROOT_USER: siemert_minio_key
      MINIO_ROOT_PASSWORD: siemert_minio_secret_2025
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - siemert-network
    restart: unless-stopped

  # Redis - Caching & Session Store
  redis:
    image: redis:7-alpine
    container_name: siemert-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - siemert-network
    restart: unless-stopped

  # KI-Service (Python f√ºr Berechnungen)
  ai-service:
    build:
      context: ./ai-service
      dockerfile: Dockerfile
    container_name: siemert-ai-service
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_DB: siemert_ai
      POSTGRES_USER: siemert_user
      POSTGRES_PASSWORD: siemert_secure_2025
      REDIS_URL: redis://redis:6379
      OPENAI_API_KEY: ${OPENAI_API_KEY}
    volumes:
      - ./ai-service:/app
      - ./shared/calculations:/app/calculations
    ports:
      - "5000:5000"
    depends_on:
      - postgres
      - redis
    networks:
      - siemert-network
    restart: unless-stopped

  # pgAdmin - Datenbank-Verwaltung (Optional)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: siemert-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@siemert.ai
      PGADMIN_DEFAULT_PASSWORD: siemert_pgadmin_2025
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - siemert-network
    restart: unless-stopped
    profiles:
      - admin

volumes:
  postgres_data:
    driver: local
  mongodb_data:
    driver: local
  minio_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  siemert-network:
    driver: bridge
    name: siemert-ai-network